import nextcord
from nextcord import Interaction, SlashOption
from nextcord.ext import commands

# –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞
class game_rps(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @nextcord.slash_command(description="–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞", dm_permission=False)
    async def game_rps(self, interaction: Interaction, user : nextcord.User = SlashOption(description="–í—ã–±–µ—Ä–µ—Ç–µ —Å –∫–µ–º –±—É–¥–µ—Ç–µ –∏–≥—Ä–∞—Ç—å?")):
        user_interaction_1 = interaction.user
        user_interaction_2 = user
        view = rps(user_interaction_1, user_interaction_2)
        await interaction.response.send_message(user_interaction_1.mention+" –∏ "+user_interaction_2.mention+" –∏–≥—Ä–∞—é—Ç –≤ –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞")
        await interaction.channel.send("–ò–≥—Ä–æ–∫–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", view=view)
        await view.wait()
        if view.player_one_choice is not None and view.player_two_choice is not None:
            # –≤—Å–µ —Å–ª—É—á–∞–∏ –∫–∞–º–Ω—è
            if view.player_one_choice == 1 and view.player_two_choice == 2:
               await interaction.channel.send(user_interaction_1.mention+" –ü–æ–±–µ–¥–∏–ª")
            if view.player_one_choice == 2 and view.player_two_choice == 1:
                await interaction.channel.send(user_interaction_2.mention+" –ü–æ–±–µ–¥–∏–ª")
            if view.player_one_choice == 1 and view.player_two_choice == 1:
                await interaction.channel.send("–ù–∏—á—å—è")
            # –≤—Å–µ —Å–ª—É—á–∞–∏ –Ω–æ–∂–Ω–∏—Ü
            if view.player_one_choice == 2 and view.player_two_choice == 3:
                await interaction.channel.send(user_interaction_1.mention+" –ü–æ–±–µ–¥–∏–ª")
            if view.player_one_choice == 3 and view.player_two_choice == 2:
                await interaction.channel.send(user_interaction_2.mention+" –ü–æ–±–µ–¥–∏–ª")
            if view.player_one_choice == 2 and view.player_two_choice == 2:
                await interaction.channel.send("–ù–∏—á—å—è")
            # –≤—Å–µ —Å–ª—É—á–∞–∏ –±—É–º–∞–≥–∏
            if view.player_one_choice == 3 and view.player_two_choice == 1:
                await interaction.channel.send(user_interaction_1.mention+" –ü–æ–±–µ–¥–∏–ª")
            if view.player_one_choice == 1 and view.player_two_choice == 3:
                await interaction.channel.send(user_interaction_2.mention+" –ü–æ–±–µ–¥–∏–ª")
            if view.player_one_choice == 3 and view.player_two_choice == 3:
                await interaction.channel.send("–ù–∏—á—å—è")    
        # –≤—Å–µ —Å–ª—É—á–∞–∏ –∫–æ–≥–¥–∞ –≤—Ä–µ–º—è –≤—ã—à–ª–æ
        if view.player_one_choice is None and view.player_two_choice is not None:
            await interaction.channel.send(user_interaction_1.mention+" –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª")
        if view.player_one_choice is not None and view.player_two_choice is None:
            await interaction.channel.send(user_interaction_2.mention+" –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª")
        if view.player_one_choice is None and view.player_two_choice is None:
            await interaction.channel.send("–í—Ä–µ–º—è –≤—ã—à–ª–æ...")

class rps(nextcord.ui.View):
    def __init__(self, user_interaction_1, user_interaction_2):
        super().__init__()
        self.timeout = 10 #—Ç–∞–π–º–∞—É—Ç –Ω–∞ 10 —Å–µ–∫
        self.user_interaction_1 = user_interaction_1 # –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ (—Ç–æ—Ç –∫—Ç–æ –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É)
        self.user_interaction_2 = user_interaction_2 # –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ (—Ç–æ—Ç –∫–æ–≥–æ –≤—ã–±—Ä–∞–ª–∏)
        self.player_one_choice = None # –≤—ã–±–æ—Ä –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        self.player_two_choice = None # –≤—ã–±–æ—Ä –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
                  
    @nextcord.ui.button(label="–ö–∞–º–µ–Ω—å", emoji= "ü™®", style=nextcord.ButtonStyle.blurple)
    async def button1(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        if interaction.user == self.user_interaction_1 or interaction.user == self.user_interaction_2:
            if (interaction.user == self.user_interaction_1) and (self.player_one_choice is None and self.player_one_choice is None):
                self.player_one_choice = 1
                await interaction.response.send_message("–í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω.", ephemeral=True)
            if (interaction.user == self.user_interaction_1) and (self.player_one_choice is None and self.player_two_choice is not None):
                self.player_one_choice = 1
                self.stop()
                await interaction.response.send_message("–í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω.", ephemeral=True)
  
            if (interaction.user == self.user_interaction_2 and self.player_one_choice is None and self.player_two_choice is None):
                self.player_two_choice = 1
                await interaction.response.send_message("–í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω.", ephemeral=True)
            if (interaction.user == self.user_interaction_2) and (self.player_one_choice is not None and self.player_two_choice is None):
                self.player_two_choice = 1
                self.stop()
                await interaction.response.send_message("–í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω.", ephemeral=True)
        else:
            await interaction.response.send_message("–ò–≥—Ä–∞—é—Ç –Ω–µ —Å –≤–∞–º–∏.", ephemeral=True)

    @nextcord.ui.button(label="–ù–æ–∂–Ω–∏—Ü—ã", emoji= "‚úÇ", style=nextcord.ButtonStyle.blurple)
    async def button2(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        if interaction.user == self.user_interaction_1 or interaction.user == self.user_interaction_2:
            if (interaction.user == self.user_interaction_1) and (self.player_one_choice is None and self.player_one_choice is None):
                self.player_one_choice = 2
                await interaction.response.send_message("–í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω.", ephemeral=True)
            if (interaction.user == self.user_interaction_1) and (self.player_one_choice is None and self.player_two_choice is not None):
                self.player_one_choice = 2
                self.stop()
                await interaction.response.send_message("–í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω.", ephemeral=True)
  
            if (interaction.user == self.user_interaction_2 and self.player_one_choice is None and self.player_two_choice is None):
                self.player_two_choice = 2
                await interaction.response.send_message("–í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω.", ephemeral=True)
            if (interaction.user == self.user_interaction_2) and (self.player_one_choice is not None and self.player_two_choice is None):
                self.player_two_choice = 2
                self.stop()
                await interaction.response.send_message("–í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω.", ephemeral=True)
        else:
            await interaction.response.send_message("–ò–≥—Ä–∞—é—Ç –Ω–µ —Å –≤–∞–º–∏.", ephemeral=True)

    @nextcord.ui.button(label="–ë—É–º–∞–≥–∞", emoji= "üìÑ", style=nextcord.ButtonStyle.blurple)
    async def button3(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        if interaction.user == self.user_interaction_1 or interaction.user == self.user_interaction_2:
            if (interaction.user == self.user_interaction_1) and (self.player_one_choice is None and self.player_one_choice is None):
                self.player_one_choice = 3
                await interaction.response.send_message("–í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω.", ephemeral=True)
            if (interaction.user == self.user_interaction_1) and (self.player_one_choice is None and self.player_two_choice is not None):
                self.player_one_choice = 3
                self.stop()
                await interaction.response.send_message("–í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω.", ephemeral=True)
  
            if (interaction.user == self.user_interaction_2 and self.player_one_choice is None and self.player_two_choice is None):
                self.player_two_choice = 3
                await interaction.response.send_message("–í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω.", ephemeral=True)
            if (interaction.user == self.user_interaction_2) and (self.player_one_choice is not None and self.player_two_choice is None):
                self.player_two_choice = 3
                self.stop()
                await interaction.response.send_message("–í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω.", ephemeral=True)
        else:
            await interaction.response.send_message("–ò–≥—Ä–∞—é—Ç –Ω–µ —Å –≤–∞–º–∏.", ephemeral=True)

def setup(bot):
    bot.add_cog(game_rps(bot))